openapi: 3.0.3
info:
  title: TODO API
  version: 1.0.0
  description: Challenge api DRF
paths:
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /register/:
    post:
      operationId: register_create
      description: Simple registration View
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /tasks/:
    get:
      operationId: tasks_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__icontains
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__range
        schema:
          type: array
          items:
            type: string
            format: date-time
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      - in: query
        name: description__icontains
        schema:
          type: string
      - name: q
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - name: sort
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tasks'
          description: ''
    post:
      operationId: tasks_create
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TasksCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TasksCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TasksCreate'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksCreate'
          description: ''
  /tasks/{task_id}/:
    get:
      operationId: tasks_retrieve
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tasks.
        required: true
      tags:
      - tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
          description: ''
    put:
      operationId: tasks_update
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tasks.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TasksUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TasksUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TasksUpdate'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksUpdate'
          description: ''
    patch:
      operationId: tasks_partial_update
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tasks.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTasks'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTasks'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTasks'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
          description: ''
    delete:
      operationId: tasks_destroy
      parameters:
      - in: path
        name: task_id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this tasks.
        required: true
      tags:
      - tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /users/:
    get:
      operationId: users_list
      tags:
      - users
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    PatchedTasks:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
        status:
          $ref: '#/components/schemas/StatusEnum'
        title:
          type: string
          maxLength: 100
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        started_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          readOnly: true
        duration:
          type: string
          format: date-time
          readOnly: true
    StatusEnum:
      enum:
      - Completed
      - Started
      - Created
      type: string
      description: |-
        * `Completed` - Completed
        * `Started` - Started
        * `Created` - Created
    Tasks:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
        status:
          $ref: '#/components/schemas/StatusEnum'
        title:
          type: string
          maxLength: 100
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        started_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
          readOnly: true
        duration:
          type: string
          format: date-time
          readOnly: true
      required:
      - completed_at
      - created_at
      - description
      - duration
      - started_at
      - task_id
      - title
      - user
    TasksCreate:
      type: object
      properties:
        user:
          type: integer
          readOnly: true
        task_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
      required:
      - description
      - task_id
      - title
      - user
    TasksUpdate:
      type: object
      properties:
        user:
          type: integer
          readOnly: true
        task_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        description:
          type: string
        status:
          $ref: '#/components/schemas/StatusEnum'
      required:
      - description
      - task_id
      - title
      - user
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
      required:
      - username
    UserRegistration:
      type: object
      description: Simple register Serializer
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
          minLength: 8
      required:
      - password
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
